#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        clt: cust_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "CUSTOM_LAYER_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <175>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;

            hold-trigger-key-positions = <40 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        cmt: cmt {
            compatible = "zmk,behavior-hold-tap";
            label = "CUSTOM_MOD_TAP";
            #binding-cells = <2>;
            tapping-term-ms = <120>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-key-positions = <33 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75>;
            hold-trigger-on-release;
        };

        clt_l: clt_l {
            compatible = "zmk,behavior-hold-tap";
            label = "CLT_L";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;

            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 53 54 55 56 57 58 59 68 69 70 71 72 73 74 75>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
        };

        clt_r: clt_r {
            compatible = "zmk,behavior-hold-tap";
            label = "CLT_R";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "hold-preferred";
            bindings = <&mo>, <&kp>;

            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
        };

        cmt_l: cmt_l {
            compatible = "zmk,behavior-hold-tap";
            label = "CMT_L";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            hold-trigger-key-positions = <7 8 9 10 11 12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 53 54 55 56 57 58 59 68 69 70 71 72 73 74 75>;
            require-prior-idle-ms = <100>;
            quick-tap-ms = <150>;
        };

        cmt_r: cmt_r {
            compatible = "zmk,behavior-hold-tap";
            label = "CMT_R";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick_tap_ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 46 47 48 49 50 51 52 60 61 62 63 64 65 66 67>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
        };
    };

    macros {
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&trans        &kp N1               &kp N2  &kp N3       &kp N4      &kp N5  &none                                                                          &mo 3          &kp N6  &kp N7      &kp N8       &kp N9  &kp N0                        &trans
&kp TAB       &kp Q                &kp W   &kp E        &kp R       &kp T   &none                                                                          &none          &kp Y   &kp U       &kp I        &kp O   &kp P                         &trans
&kp CAPSLOCK  &cmt_l LEFT_SHIFT A  &kp S   &clt_l 10 D  &clt_l 4 F  &kp G   &none      &clt 12 KP_NUMBER_0  &none          &none      &clt 12 KP_NUMBER_1  &none          &kp H   &clt_r 5 J  &clt_r 10 K  &kp L   &cmt_r RIGHT_SHIFT SEMICOLON  &trans
&trans        &kp Z                &kp X   &kp C        &kp V       &kp B                                   &kp LALT       &kp LALT                                       &kp N   &kp M       &trans       &trans  &trans                        &trans
&mo 2         &none                &none   &none        &none               &kp SPACE  &kp LEFT_COMMAND     &kp LCTRL      &kp LCTRL  &kp RIGHT_COMMAND    &kp BACKSPACE          &none       &none        &none   &trans                        &mo 2
            >;
        };

        keypad {
            bindings = <
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &trans                                      &trans  &kp N6  &kp KP_NUM  &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &trans
&trans  &kp Q   &kp W   &kp E   &kp R   &kp T   &trans                                      &trans  &kp Y   &kp KP_N7   &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &trans
&trans  &kp A   &kp S   &kp D   &kp F   &kp G   &trans  &trans  &trans      &trans  &trans  &trans  &kp H   &kp KP_N4   &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &trans
&trans  &kp Z   &kp X   &kp C   &kp V   &kp B                   &trans      &trans                  &kp N   &kp KP_N1   &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &trans
&mo 2   &trans  &trans  &trans  &trans          &trans  &trans  &trans      &trans  &trans  &trans          &trans      &kp KP_N0     &kp KP_DOT     &trans           &mo 2
            >;
        };

        fn {
            bindings = <
&kp F1        &kp F2                &kp F3                             &kp F4                                  &kp F5               &kp F6  &tog 1                                      &mo 3   &kp F7      &kp F8            &kp F9      &kp F10       &kp F11       &kp F12
&kp C_BRI_DN  &kp C_BRIGHTNESS_INC  &kp C_AC_DESKTOP_SHOW_ALL_WINDOWS  &kp C_AC_DESKTOP_SHOW_ALL_APPLICATIONS  &kp C_VOICE_COMMAND  &trans  &trans                                      &trans  &kp C_PREV  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_MUTE
&trans        &trans                &trans                             &trans                                  &trans               &trans  &trans  &trans  &trans      &trans  &trans  &trans  &kp LEFT    &kp DOWN          &kp UP      &kp RIGHT     &trans        &trans
&trans        &trans                &trans                             &trans                                  &trans               &trans                  &trans      &trans                  &trans      &trans            &trans      &trans        &trans        &trans
&trans        &trans                &trans                             &trans                                  &trans                       &trans  &trans  &trans      &trans  &trans  &trans              &trans            &trans      &trans        &trans        &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        l_nav {
            bindings = <
&trans  &trans     &trans    &trans    &trans  &trans  &trans                                      &trans  &trans    &trans    &trans  &trans     &trans     &trans
&trans  &trans     &trans    &trans    &trans  &trans  &trans                                      &trans  &trans    &trans    &trans  &trans     &trans     &trans
&trans  &kp LCTRL  &kp LALT  &kp LGUI  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &kp ENTER  &trans
&trans  &trans     &trans    &trans    &trans  &trans                  &trans      &trans                  &trans    &trans    &trans  &trans     &trans     &trans
&trans  &trans     &trans    &trans    &trans          &trans  &trans  &trans      &trans  &trans  &trans            &trans    &trans  &trans     &trans     &trans
            >;
        };

        r_nav {
            bindings = <
&trans  &trans     &trans    &trans  &trans    &trans     &trans                                      &trans  &trans  &trans  &trans    &trans    &trans     &trans
&trans  &trans     &trans    &trans  &trans    &trans     &trans                                      &trans  &trans  &trans  &trans    &trans    &trans     &trans
&trans  &kp ENTER  &kp LEFT  &kp UP  &kp DOWN  &kp RIGHT  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &kp RGUI  &kp RALT  &kp RCTRL  &trans
&trans  &trans     &trans    &trans  &trans    &trans                     &trans      &trans                  &trans  &trans  &trans    &trans    &trans     &trans
&trans  &trans     &trans    &trans  &trans               &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans    &trans    &trans     &trans
            >;
        };

        l_write {
            bindings = <
&trans  &trans        &trans  &trans     &trans   &trans  &trans                                      &trans  &trans  &trans     &trans   &trans       &trans     &trans
&trans  &trans        &trans  &trans     &trans   &trans  &trans                                      &trans  &trans  &trans     &trans   &trans       &trans     &trans
&trans  &kp EXCL      &trans  &kp COMMA  &kp DOT  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &kp GRAVE  &kp SQT  &kp LS(DQT)  &kp CARET  &trans
&trans  &kp QUESTION  &trans  &trans     &trans   &trans                  &trans      &trans                  &trans  &trans     &trans   &trans       &trans     &trans
&trans  &trans        &trans  &trans     &trans           &trans  &trans  &trans      &trans  &trans  &trans          &trans     &trans   &trans       &trans     &trans
            >;
        };

        r_write {
            bindings = <
&trans  &trans         &trans       &trans   &trans     &trans  &trans                                      &trans  &trans  &trans   &trans     &trans  &trans         &trans
&trans  &trans         &trans       &trans   &trans     &trans  &trans                                      &trans  &trans  &trans   &trans     &trans  &trans         &trans
&trans  &kp LS(CARET)  &kp LS(DQT)  &kp SQT  &kp GRAVE  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &kp DOT  &kp COMMA  &trans  &kp LS(EXCL)   &trans
&trans  &trans         &trans       &trans   &trans     &trans                  &trans      &trans                  &trans  &trans   &trans     &trans  &kp LS(QMARK)  &trans
&trans  &trans         &trans       &trans   &trans             &trans  &trans  &trans      &trans  &trans  &trans          &trans   &trans     &trans  &trans         &trans
            >;
        };

        l_sym {
            bindings = <
&trans  &trans  &trans        &trans        &trans         &trans        &trans                                      &trans        &kp LS(CARET)  &kp LS(AT)    &kp LS(DLLR)  &kp LS(PRCNT)  &kp SQT        &kp LS(DQT)
&trans  &trans  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(POUND)  &kp LS(DLLR)  &trans                                      &kp LS(PLUS)  &kp MINUS      &kp LS(AMPS)  &kp LS(STAR)  &kp LS(AMPS)   &kp COMMA      &kp DOT
&trans  &trans  &kp LS(LPAR)  &kp LS(RPAR)  &kp LBKT       &kp RBKT      &trans  &trans  &trans      &trans  &trans  &kp EQUAL     &kp ESCAPE     &kp LS(LPAR)  &kp LS(RPAR)  &kp LBKT       &kp RBKT       &kp LS(COLON)
&trans  &trans  &kp LS(LT)    &kp LS(GT)    &kp LS(LBRC)   &kp LS(RBRC)                  &trans      &trans                        &kp LS(UNDER)  &kp LS(LT)    &kp LS(GT)    &kp LS(LBRC)   &kp LS(RBRC)   &kp SEMI
&trans  &trans  &trans        &trans        &trans                       &trans  &trans  &trans      &trans  &trans  &trans                       &kp LS(PIPE)  &kp FSLH      &kp BSLH       &kp LS(QMARK)  &kp LS(EXCL)
            >;
        };

        r_sym {
            bindings = <
&kp DOUBLE_QUOTES  &kp SQT        &kp LS(CARET)  &kp LS(AT)    &kp LS(DLLR)   &kp LS(PRCNT)  &trans                                            &trans  &trans        &trans        &trans         &trans        &trans  &trans
&kp DOT            &kp COMMA      &kp LS(STAR)   &kp LS(AMPS)  &kp LS(POUND)  &kp MINUS      &kp LS(PLUS)                                      &trans  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(POUND)  &kp LS(AMPS)  &trans  &trans
&kp LS(COLON)      &kp LS(LPAR)   &kp LS(RPAR)   &kp LBKT      &kp RBKT       &kp ESCAPE     &kp EQUAL     &trans  &trans      &trans  &trans  &trans  &kp LS(LPAR)  &kp LS(RPAR)  &kp LBKT       &kp RBKT      &trans  &trans
&kp SEMI           &kp LS(LT)     &kp LS(GT)     &kp LS(LBRC)  &kp LS(RBRC)   &kp LS(UNDER)                        &trans      &trans                  &kp LS(LT)    &kp LS(GT)    &kp LS(LBRC)   &kp LS(RBRC)  &trans  &trans
&kp LS(EXCL)       &kp LS(QMARK)  &kp FSLH       &kp BSLH      &kp LS(PIPE)                  &trans        &trans  &trans      &trans  &trans  &trans                &trans        &trans         &trans        &trans  &trans
            >;
        };

        comb_sym {
            bindings = <
&none       &none         &none       &none          &none         &none          &none                                  &none  &none          &none         &none         &none      &none          &none
&none       &kp LS(PIPE)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PLUS)   &none                                  &none  &kp MINUS      &kp LS(AMPS)  &kp LS(STAR)  &kp GRAVE  &kp LS(EXCL)   &none
&kp ESCAPE  &kp LS(DQT)   &kp SQT     &kp LBKT       &kp RBKT      &kp EQUAL      &none  &none  &none      &none  &none  &none  &kp LS(COLON)  &kp LS(LPAR)  &kp LS(RPAR)  &kp COMMA  &kp SEMI       &none
&none       &kp FSLH      &kp BSLH    &kp LS(LBRC)   &kp LS(RBRC)  &kp LS(UNDER)                &none      &none                &kp LS(CARET)  &kp LS(LT)    &kp LS(GT)    &kp DOT    &kp LS(QMARK)  &none
&none       &none         &none       &none          &none                        &none  &none  &none      &none  &none  &none                 &none         &none         &none      &none          &none
            >;
        };

        multimedia {
            bindings = <
&trans  &trans  &trans         &trans            &trans           &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp C_VOL_DN   &kp C_MUTE        &kp C_VOLUME_UP  &trans  &trans                                      &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp C_PREV     &kp C_PLAY_PAUSE  &kp C_FF         &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp C_BRI_DEC  &kp C_BRI_INC     &kp CAPSLOCK     &trans                  &trans      &trans                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans         &trans            &trans                   &trans  &trans  &trans      &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        comb_nums {
            bindings = <
&trans  &trans           &trans           &trans           &trans           &trans           &trans                                      &trans  &trans           &trans           &trans           &trans           &trans           &trans
&trans  &trans           &trans           &trans           &trans           &trans           &trans                                      &trans  &trans           &trans           &trans           &trans           &trans           &trans
&trans  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp KP_NUMBER_4  &kp KP_NUMBER_5  &trans  &trans  &trans      &trans  &trans  &trans  &kp KP_NUMBER_6  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp KP_NUMBER_0  &trans
&trans  &trans           &trans           &trans           &trans           &trans                           &trans      &trans                  &trans           &trans           &trans           &trans           &trans           &trans
&trans  &trans           &trans           &trans           &trans                            &trans  &trans  &trans      &trans  &trans  &trans                   &trans           &trans           &trans           &trans           &trans
            >;
        };
    };
};
